[{"/Users/jialening/Desktop/Faculty_Movement/frontend/src/index.js":"1","/Users/jialening/Desktop/Faculty_Movement/frontend/src/App.js":"2","/Users/jialening/Desktop/Faculty_Movement/frontend/src/reportWebVitals.js":"3","/Users/jialening/Desktop/Faculty_Movement/frontend/src/viewTask.js":"4","/Users/jialening/Desktop/Faculty_Movement/frontend/src/viewData.js":"5","/Users/jialening/Desktop/Faculty_Movement/frontend/src/overView.js":"6"},{"size":500,"mtime":1641759845765,"results":"7","hashOfConfig":"8"},{"size":782,"mtime":1641759845764,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1641759845766,"results":"10","hashOfConfig":"8"},{"size":3203,"mtime":1641759845767,"results":"11","hashOfConfig":"8"},{"size":6735,"mtime":1641759845767,"results":"12","hashOfConfig":"8"},{"size":8395,"mtime":1641759845766,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18a9ygq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/Users/jialening/Desktop/Faculty_Movement/frontend/src/index.js",[],["28","29"],"/Users/jialening/Desktop/Faculty_Movement/frontend/src/App.js",[],"/Users/jialening/Desktop/Faculty_Movement/frontend/src/reportWebVitals.js",[],"/Users/jialening/Desktop/Faculty_Movement/frontend/src/viewTask.js",[],"/Users/jialening/Desktop/Faculty_Movement/frontend/src/viewData.js",[],"/Users/jialening/Desktop/Faculty_Movement/frontend/src/overView.js",["30","31"],"import React, { useState, useEffect } from 'react';\nimport Chart from \"react-google-charts\";\nimport ReactSearchBox from 'react-search-box';\nimport {FormControl, Button, Grid} from \"@material-ui/core\";\nimport { HotTable } from '@handsontable/react';\nimport \"./overView.css\";\n\n\nconst parseSearchBoxData = (data) => {\n  var records = [];\n  for (var i = 0; i < data.length; i++) {\n      records.push({\"key\": data[i], \"value\":data[i]});\n  }\n  return records;\n}\n\nconst SearchBox = ({ placeholder, data, setter, focus }) => {\n  return (\n      <div className=\"homeInput\">\n          <ReactSearchBox\n            placeholder={placeholder}\n            data={data}\n            fuseConfigs={{threshold: 0.05}}\n            value=\"\"\n            onFocus={(e) => e.target.value=\"\"} \n            onSelect={(e) => setter(e.key)}\n          />\n      </div>\n  )\n}\n\n\nfunction OverView() {\n  const [averageRunningTime, setAverageRunningTime] = useState([0, 0]);\n  const [departmentOverview, setDepartmentOverview] = useState([['Status', 'Num']]);\n  const [facultyOverview, setFacultyOverview] = useState([['Status', 'Num']]);\n  const [departmentExecutionTime, setDepartmentExecutionTime] = useState([['Status', 'Num']]);\n  const [facultyExecutionTime, setFacultyExecutionTime] = useState([['Status', 'Num']]);\n\n  const [universityList, setUniversityList] = useState([]);\n  const [university, setUniversity] = useState('');\n  const [departmentList, setDepartmentList] = useState([]);\n  const [department, setDepartment] = useState('');\n\n  const [nextTasks, setNextTasks] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    fetch('/averageRunningTime').then(res => res.json()).then(data => {\n      setAverageRunningTime([data.department, data.faculty]);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch('/departmentOverview').then(res => res.json()).then(data => {\n      setDepartmentOverview(data.res);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch('/facultyOverview').then(res => res.json()).then(data => {\n      setFacultyOverview(data.res);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch('/departmentExecutionTime').then(res => res.json()).then(data => {\n      setDepartmentExecutionTime(data.res);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch('/facultyExecutionTime').then(res => res.json()).then(data => {\n      setFacultyExecutionTime(data.res);\n    });\n  }, []);\n\n  useEffect(() => {\n    let q = {'page': page, 'university': university, 'department': department}\n    fetch('/getNextTasks', {method:\"POST\",body:JSON.stringify(q),headers:{\"content_type\":\"application/json\"}}).then(res => res.json()).then(data => {\n      setNextTasks(data.res);\n    });\n  }, [page]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n          await fetch('/getUniversityList').then(res => res.json()).then(data => {\n            setUniversityList(data.university);\n          });\n      } catch (e) {\n          console.log(e);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      try {\n          await fetch('/getDepartmentList', {method:\"POST\",body:JSON.stringify(university),headers:{\"content_type\":\"application/json\"}})\n          .then(res => res.json()).then(data => {\n            setDepartmentList(data.department);\n          });\n      } catch (e) {\n          console.log(e);\n      }\n    })();\n  }, [university]);\n\n  async function prioritize() {\n    // let q = {'university': university, 'department': department};\n    let q = {'table': nextTasks}\n    await fetch('/prioritizeTasks', {method:\"POST\", body:JSON.stringify(q), headers:{\"content_type\":\"application/json\"}})\n    let q1 = {'page': page, 'university': university, 'department': department}\n    await fetch('/getNextTasks', {method:\"POST\",body:JSON.stringify(q1),headers:{\"content_type\":\"application/json\"}}).then(res => res.json()).then(data => {\n      setNextTasks(data.res);\n    });\n  }\n\n  async function prioritizeAll() {\n    let q = {'university': university, 'department': department};\n    await fetch('/prioritizeAll', {method:\"POST\", body:JSON.stringify(q), headers:{\"content_type\":\"application/json\"}})\n    let q1 = {'page': page, 'university': university, 'department': department}\n    await fetch('/getNextTasks', {method:\"POST\",body:JSON.stringify(q1),headers:{\"content_type\":\"application/json\"}}).then(res => res.json()).then(data => {\n      setNextTasks(data.res);\n    });\n  }\n\n  async function deleteTask() {\n    let q = {'university': university, 'department': department};\n    await fetch('/deleteTasks', {method:\"POST\", body:JSON.stringify(q), headers:{\"content_type\":\"application/json\"}})\n  }\n\n  async function refreshTable() {\n    setPage(1);\n    let q1 = {'page': page, 'university': university, 'department': department}\n    await fetch('/getNextTasks', {method:\"POST\",body:JSON.stringify(q1),headers:{\"content_type\":\"application/json\"}}).then(res => res.json()).then(data => {\n      setNextTasks(data.res);\n    });\n  }\n\n  function previousPage(x) {\n    if (page > 1 && x === 1) {\n      setPage(page - 1);\n    } \n    if (x === 2) {\n      setPage(page + 1);\n    }\n  }\n\n  return (\n    <div>\n      <div class=\"row\">\n        <div class=\"column\">\n        <Chart\n          width={'330px'}\n          height={'300px'}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={departmentOverview}\n          options={{\n            title: 'Department Task',\n          }}\n        />\n        </div>\n        <div class=\"column\">\n          <Chart\n            width={'330px'}\n            height={'300px'}\n            chartType=\"PieChart\"\n            loader={<div>Loading Chart</div>}\n            data={facultyOverview}\n            options={{\n              title: 'Faculty Task',\n            }}\n          />\n        </div>\n        <div class=\"column\">\n          <Chart\n            width={'330px'}\n            height={'300px'}\n            chartType=\"PieChart\"\n            loader={<div>Loading Chart</div>}\n            data={departmentExecutionTime}\n            options={{\n              title: `Department Task Execution Time \\n(Avg ${averageRunningTime[0]} seconds)`\n            }}\n          />\n        </div>\n        <div class=\"column\">\n          <Chart\n            width={'330px'}\n            height={'300px'}\n            chartType=\"PieChart\"\n            loader={<div>Loading Chart</div>}\n            data={facultyExecutionTime}\n            options={{\n              title: `Faculty Task Execution Time \\n(Avg ${averageRunningTime[1]} seconds)`\n            }}\n          />\n        </div>\n      </div>\n      <form>\n        <Grid container spacing={2}>\n          &nbsp;&nbsp;&nbsp;\n          <Grid item xs={4}>\n              <FormControl color={'secondary'} fullWidth required>\n              <SearchBox placeholder=\"University\" data={parseSearchBoxData(universityList)} setter={setUniversity}/>\n              </FormControl>\n          </Grid>\n          <Grid item xs={4}>\n              <FormControl color={'secondary'} fullWidth required>\n              <SearchBox placeholder=\"Department\" data={parseSearchBoxData(departmentList)} setter={setDepartment}/>\n              </FormControl>\n          </Grid>\n        </Grid>\n      </form>\n      <br/>\n      <div>\n        <Button color=\"secondary\" onClick={refreshTable}>\n          Refresh Task Table\n        </Button>\n      </div>\n      <div>\n        <Button color=\"secondary\" onClick={() => previousPage(1)}>\n          Pre\n        </Button>\n          {page}\n        <Button color=\"secondary\" onClick={() => previousPage(2)}>\n          Next\n        </Button>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <Button color=\"secondary\" onClick={prioritize}>\n          Prioritize\n        </Button>\n        <Button color=\"secondary\" onClick={prioritizeAll}>\n          Prioritize All\n        </Button>\n      </div>\n      <HotTable root=\"hot\" \n                data={nextTasks} \n                colHeaders={['University', 'Department', '']}\n                columns={[\n                  {type: 'text'},\n                  {type: 'text'},\n                  {type: 'checkbox'}\n                ]}\n                rowHeaders={true}\n                colWidths={[500, 600]}\n                className={\"htCenter\"}\n                manualColumnResize={true}\n                licenseKey={'non-commercial-and-evaluation'}/>\n    </div>\n  );\n}\n\nexport default OverView;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":83,"column":6,"nodeType":"38","endLine":83,"endColumn":12,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":129,"column":18,"nodeType":"42","messageId":"43","endLine":129,"endColumn":28},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'department' and 'university'. Either include them or remove the dependency array.","ArrayExpression",["46"],"no-unused-vars","'deleteTask' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [department, page, university]",{"range":"49","text":"50"},[2674,2680],"[department, page, university]"]